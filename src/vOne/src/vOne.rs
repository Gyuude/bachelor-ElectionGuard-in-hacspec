#![allow(non_snake_case)]
#![allow(dead_code)]
#![allow(warnings, unused)]

use hacspec_lib::*;
use schema::*;

bytes!(Barr, 512);

pub const PBARR: Barr = Barr(secret_bytes!([
    0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 
    0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 
    0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0x93u8, 0xC4u8, 0x67u8, 0xE3u8, 
    0x7Du8, 0xB0u8, 0xC7u8, 0xA4u8, 0xD1u8, 0xBEu8, 0x3Fu8, 0x81u8, 0x01u8, 0x52u8, 0xCBu8, 0x56u8, 
    0xA1u8, 0xCEu8, 0xCCu8, 0x3Au8, 0xF6u8, 0x5Cu8, 0xC0u8, 0x19u8, 0x0Cu8, 0x03u8, 0xDFu8, 0x34u8, 
    0x70u8, 0x9Au8, 0xFFu8, 0xBDu8, 0x8Eu8, 0x4Bu8, 0x59u8, 0xFAu8, 0x03u8, 0xA9u8, 0xF0u8, 0xEEu8, 
    0xD0u8, 0x64u8, 0x9Cu8, 0xCBu8, 0x62u8, 0x10u8, 0x57u8, 0xD1u8, 0x10u8, 0x56u8, 0xAEu8, 0x91u8, 
    0x32u8, 0x13u8, 0x5Au8, 0x08u8, 0xE4u8, 0x3Bu8, 0x46u8, 0x73u8, 0xD7u8, 0x4Bu8, 0xAFu8, 0xEAu8, 
    0x58u8, 0xDEu8, 0xB8u8, 0x78u8, 0xCCu8, 0x86u8, 0xD7u8, 0x33u8, 0xDBu8, 0xE7u8, 0xBFu8, 0x38u8, 
    0x15u8, 0x4Bu8, 0x36u8, 0xCFu8, 0x8Au8, 0x96u8, 0xD1u8, 0x56u8, 0x78u8, 0x99u8, 0xAAu8, 0xAEu8, 
    0x0Cu8, 0x09u8, 0xD4u8, 0xC8u8, 0xB6u8, 0xB7u8, 0xB8u8, 0x6Fu8, 0xD2u8, 0xA1u8, 0xEAu8, 0x1Du8, 
    0xE6u8, 0x2Fu8, 0xF8u8, 0x64u8, 0x3Eu8, 0xC7u8, 0xC2u8, 0x71u8, 0x82u8, 0x79u8, 0x77u8, 0x22u8, 
    0x5Eu8, 0x6Au8, 0xC2u8, 0xF0u8, 0xBDu8, 0x61u8, 0xC7u8, 0x46u8, 0x96u8, 0x15u8, 0x42u8, 0xA3u8, 
    0xCEu8, 0x3Bu8, 0xEAu8, 0x5Du8, 0xB5u8, 0x4Fu8, 0xE7u8, 0x0Eu8, 0x63u8, 0xE6u8, 0xD0u8, 0x9Fu8, 
    0x8Fu8, 0xC2u8, 0x86u8, 0x58u8, 0xE8u8, 0x05u8, 0x67u8, 0xA4u8, 0x7Cu8, 0xFDu8, 0xE6u8, 0x0Eu8, 
    0xE7u8, 0x41u8, 0xE5u8, 0xD8u8, 0x5Au8, 0x7Bu8, 0xD4u8, 0x69u8, 0x31u8, 0xCEu8, 0xD8u8, 0x22u8, 
    0x03u8, 0x65u8, 0x59u8, 0x49u8, 0x64u8, 0xB8u8, 0x39u8, 0x89u8, 0x6Fu8, 0xCAu8, 0xABu8, 0xCCu8, 
    0xC9u8, 0xB3u8, 0x19u8, 0x59u8, 0xC0u8, 0x83u8, 0xF2u8, 0x2Au8, 0xD3u8, 0xEEu8, 0x59u8, 0x1Cu8, 
    0x32u8, 0xFAu8, 0xB2u8, 0xC7u8, 0x44u8, 0x8Fu8, 0x2Au8, 0x05u8, 0x7Du8, 0xB2u8, 0xDBu8, 0x49u8, 
    0xEEu8, 0x52u8, 0xE0u8, 0x18u8, 0x27u8, 0x41u8, 0xE5u8, 0x38u8, 0x65u8, 0xF0u8, 0x04u8, 0xCCu8, 
    0x8Eu8, 0x70u8, 0x4Bu8, 0x7Cu8, 0x5Cu8, 0x40u8, 0xBFu8, 0x30u8, 0x4Cu8, 0x4Du8, 0x8Cu8, 0x4Fu8, 
    0x13u8, 0xEDu8, 0xF6u8, 0x04u8, 0x7Cu8, 0x55u8, 0x53u8, 0x02u8, 0xD2u8, 0x23u8, 0x8Du8, 0x8Cu8, 
    0xE1u8, 0x1Du8, 0xF2u8, 0x42u8, 0x4Fu8, 0x1Bu8, 0x66u8, 0xC2u8, 0xC5u8, 0xD2u8, 0x38u8, 0xD0u8, 
    0x74u8, 0x4Du8, 0xB6u8, 0x79u8, 0xAFu8, 0x28u8, 0x90u8, 0x48u8, 0x70u8, 0x31u8, 0xF9u8, 0xC0u8, 
    0xAEu8, 0xA1u8, 0xC4u8, 0xBBu8, 0x6Fu8, 0xE9u8, 0x55u8, 0x4Eu8, 0xE5u8, 0x28u8, 0xFDu8, 0xF1u8, 
    0xB0u8, 0x5Eu8, 0x5Bu8, 0x25u8, 0x62u8, 0x23u8, 0xB2u8, 0xF0u8, 0x92u8, 0x15u8, 0xF3u8, 0x71u8, 
    0x9Fu8, 0x9Cu8, 0x7Cu8, 0xCCu8, 0x69u8, 0xDDu8, 0xF1u8, 0x72u8, 0xD0u8, 0xD6u8, 0x23u8, 0x42u8, 
    0x17u8, 0xFCu8, 0xC0u8, 0x03u8, 0x7Fu8, 0x18u8, 0xB9u8, 0x3Eu8, 0xF5u8, 0x38u8, 0x91u8, 0x30u8, 
    0xB7u8, 0xA6u8, 0x61u8, 0xE5u8, 0xC2u8, 0x6Eu8, 0x54u8, 0x21u8, 0x40u8, 0x68u8, 0xBBu8, 0xCAu8, 
    0xFEu8, 0xA3u8, 0x2Au8, 0x67u8, 0x81u8, 0x8Bu8, 0xD3u8, 0x07u8, 0x5Au8, 0xD1u8, 0xF5u8, 0xC7u8, 
    0xE9u8, 0xCCu8, 0x3Du8, 0x17u8, 0x37u8, 0xFBu8, 0x28u8, 0x17u8, 0x1Bu8, 0xAFu8, 0x84u8, 0xDBu8, 
    0xB6u8, 0x61u8, 0x2Bu8, 0x78u8, 0x81u8, 0xC1u8, 0xA4u8, 0x8Eu8, 0x43u8, 0x9Cu8, 0xD0u8, 0x3Au8, 
    0x92u8, 0xBFu8, 0x52u8, 0x22u8, 0x5Au8, 0x2Bu8, 0x38u8, 0xE6u8, 0x54u8, 0x2Eu8, 0x9Fu8, 0x72u8, 
    0x2Bu8, 0xCEu8, 0x15u8, 0xA3u8, 0x81u8, 0xB5u8, 0x75u8, 0x3Eu8, 0xA8u8, 0x42u8, 0x76u8, 0x33u8, 
    0x81u8, 0xCCu8, 0xAEu8, 0x83u8, 0x51u8, 0x2Bu8, 0x30u8, 0x51u8, 0x1Bu8, 0x32u8, 0xE5u8, 0xE8u8, 
    0xD8u8, 0x03u8, 0x62u8, 0x14u8, 0x9Au8, 0xD0u8, 0x30u8, 0xAAu8, 0xBAu8, 0x5Fu8, 0x3Au8, 0x57u8, 
    0x98u8, 0xBBu8, 0x22u8, 0xAAu8, 0x7Eu8, 0xC1u8, 0xB6u8, 0xD0u8, 0xF1u8, 0x79u8, 0x03u8, 0xF4u8, 
    0xE2u8, 0x2Du8, 0x84u8, 0x07u8, 0x34u8, 0xAAu8, 0x85u8, 0x97u8, 0x3Fu8, 0x79u8, 0xA9u8, 0x3Fu8, 
    0xFBu8, 0x82u8, 0xA7u8, 0x5Cu8, 0x47u8, 0xC0u8, 0x3Du8, 0x43u8, 0xD2u8, 0xF9u8, 0xCAu8, 0x02u8, 
    0xD0u8, 0x31u8, 0x99u8, 0xBAu8, 0xCEu8, 0xDDu8, 0xD4u8, 0x53u8, 0x3Au8, 0x52u8, 0x56u8, 0x6Au8, 
    0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 
    0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 
    0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8
    ]));

pub const QBARR: Barr = Barr(secret_bytes!([
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 
    0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 
    0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8, 0x43u8
    ]));

pub const RBARR: Barr = Barr(secret_bytes!([
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x01u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 
    0x00u8, 0x00u8, 0x00u8, 0xBCu8, 0x93u8, 0xC4u8, 0x67u8, 0xE3u8, 0x7Du8, 0xB0u8, 0xC7u8, 0xA4u8, 
    0xD1u8, 0xBEu8, 0x3Fu8, 0x81u8, 0x01u8, 0x52u8, 0xCBu8, 0x56u8, 0xA1u8, 0xCEu8, 0xCCu8, 0x3Au8, 
    0xF6u8, 0x5Cu8, 0xC0u8, 0x19u8, 0x0Cu8, 0x03u8, 0xDFu8, 0x34u8, 0x70u8, 0x9Bu8, 0x8Au8, 0xF6u8, 
    0xA6u8, 0x4Cu8, 0x0Cu8, 0xEDu8, 0xCFu8, 0x2Du8, 0x55u8, 0x9Du8, 0xA9u8, 0xD9u8, 0x7Fu8, 0x09u8, 
    0x5Cu8, 0x30u8, 0x76u8, 0xC6u8, 0x86u8, 0x03u8, 0x76u8, 0x19u8, 0x14u8, 0x8Du8, 0x2Cu8, 0x86u8, 
    0xC3u8, 0x17u8, 0x10u8, 0x2Au8, 0xFAu8, 0x21u8, 0x48u8, 0x03u8, 0x1Fu8, 0x04u8, 0x44u8, 0x0Au8, 
    0xC0u8, 0xFFu8, 0x0Cu8, 0x9Au8, 0x41u8, 0x7Au8, 0x89u8, 0x21u8, 0x25u8, 0x12u8, 0xE7u8, 0x60u8, 
    0x7Bu8, 0x25u8, 0x01u8, 0xDAu8, 0xA4u8, 0xD3u8, 0x8Au8, 0x2Cu8, 0x14u8, 0x10u8, 0xC4u8, 0x83u8, 
    0x61u8, 0x49u8, 0xE2u8, 0xBDu8, 0xB8u8, 0xC8u8, 0x26u8, 0x0Eu8, 0x62u8, 0x7Cu8, 0x46u8, 0x46u8, 
    0x96u8, 0x3Eu8, 0xFFu8, 0xE9u8, 0xE1u8, 0x6Eu8, 0x49u8, 0x5Du8, 0x48u8, 0xBDu8, 0x21u8, 0x5Cu8, 
    0x6Du8, 0x8Eu8, 0xC9u8, 0xD1u8, 0x66u8, 0x76u8, 0x57u8, 0xA2u8, 0xA1u8, 0xC8u8, 0x50u8, 0x6Fu8, 
    0x21u8, 0x13u8, 0xFFu8, 0xADu8, 0x19u8, 0xA6u8, 0xB2u8, 0xBCu8, 0x7Cu8, 0x45u8, 0x76u8, 0x04u8, 
    0x56u8, 0x71u8, 0x91u8, 0x83u8, 0x30u8, 0x9Fu8, 0x87u8, 0x4Bu8, 0xC9u8, 0xACu8, 0xE5u8, 0x70u8, 
    0xFFu8, 0xDAu8, 0x87u8, 0x7Au8, 0xA2u8, 0xB2u8, 0x3Au8, 0x2Du8, 0x6Fu8, 0x29u8, 0x1Cu8, 0x15u8, 
    0x54u8, 0xCAu8, 0x2Eu8, 0xB1u8, 0x2Fu8, 0x12u8, 0xCDu8, 0x00u8, 0x9Bu8, 0x8Bu8, 0x87u8, 0x34u8, 
    0xA6u8, 0x4Au8, 0xD5u8, 0x1Eu8, 0xB8u8, 0x93u8, 0xBDu8, 0x89u8, 0x17u8, 0x50u8, 0xB8u8, 0x51u8, 
    0x62u8, 0x24u8, 0x1Du8, 0x90u8, 0x8Fu8, 0x0Cu8, 0x97u8, 0x09u8, 0x87u8, 0x97u8, 0x58u8, 0xE7u8, 
    0xE8u8, 0x23u8, 0x3Eu8, 0xABu8, 0x3Bu8, 0xF2u8, 0xD6u8, 0xABu8, 0x53u8, 0xAFu8, 0xA3u8, 0x2Au8, 
    0xA1u8, 0x53u8, 0xADu8, 0x66u8, 0x82u8, 0xE5u8, 0xA0u8, 0x64u8, 0x88u8, 0x97u8, 0xC9u8, 0xBEu8, 
    0x18u8, 0xA0u8, 0xD5u8, 0x0Bu8, 0xECu8, 0xE0u8, 0x30u8, 0xC3u8, 0x43u8, 0x23u8, 0x36u8, 0xADu8, 
    0x91u8, 0x63u8, 0xE3u8, 0x3Fu8, 0x8Eu8, 0x7Du8, 0xAFu8, 0x49u8, 0x8Fu8, 0x14u8, 0xBBu8, 0x28u8, 
    0x52u8, 0xAFu8, 0xFAu8, 0x81u8, 0x48u8, 0x41u8, 0xEBu8, 0x18u8, 0xDDu8, 0x5Fu8, 0x0Eu8, 0x89u8, 
    0x51u8, 0x6Du8, 0x55u8, 0x77u8, 0x76u8, 0x28u8, 0x5Cu8, 0x16u8, 0x07u8, 0x1Du8, 0x21u8, 0x11u8, 
    0x94u8, 0xEEu8, 0x1Cu8, 0x3Fu8, 0x34u8, 0x64u8, 0x20u8, 0x36u8, 0xABu8, 0x88u8, 0x6Eu8, 0x3Eu8, 
    0xC2u8, 0x88u8, 0x82u8, 0xCEu8, 0x40u8, 0x03u8, 0xDEu8, 0xA3u8, 0x35u8, 0xB4u8, 0xD9u8, 0x35u8, 
    0xBAu8, 0xE4u8, 0xB5u8, 0x82u8, 0x35u8, 0xB9u8, 0xFBu8, 0x2Bu8, 0xABu8, 0x71u8, 0x3Cu8, 0x8Fu8, 
    0x70u8, 0x5Au8, 0x1Cu8, 0x7Du8, 0xE4u8, 0x22u8, 0x20u8, 0x20u8, 0x9Du8, 0x6Bu8, 0xBCu8, 0xACu8, 
    0xC4u8, 0x67u8, 0x31u8, 0x86u8, 0x01u8, 0x56u8, 0x52u8, 0x72u8, 0xE4u8, 0xA6u8, 0x3Eu8, 0x38u8, 
    0xE2u8, 0x49u8, 0x97u8, 0x54u8, 0xAEu8, 0x49u8, 0x3Au8, 0xC1u8, 0xA8u8, 0xE8u8, 0x34u8, 0x69u8, 
    0xEEu8, 0xF3u8, 0x5Cu8, 0xA2u8, 0x7Cu8, 0x27u8, 0x1Bu8, 0xC7u8, 0x92u8, 0xEEu8, 0xE2u8, 0x11u8, 
    0x56u8, 0xE6u8, 0x17u8, 0xB9u8, 0x22u8, 0xEAu8, 0x8Fu8, 0x71u8, 0x3Cu8, 0x22u8, 0xCFu8, 0x28u8, 
    0x2Du8, 0xC5u8, 0xD6u8, 0x38u8, 0x5Bu8, 0xB1u8, 0x28u8, 0x68u8, 0xEBu8, 0x78u8, 0x12u8, 0x78u8, 
    0xFAu8, 0x0Au8, 0xB2u8, 0xA8u8, 0x95u8, 0x8Fu8, 0xCCu8, 0xB5u8, 0xFFu8, 0xE2u8, 0xE5u8, 0xC3u8, 
    0x61u8, 0xFCu8, 0x17u8, 0x44u8, 0x20u8, 0x12u8, 0x2Bu8, 0x01u8, 0x63u8, 0xCAu8, 0x4Au8, 0x46u8, 
    0x30u8, 0x8Cu8, 0x8Cu8, 0x46u8, 0xC9u8, 0x1Eu8, 0xA7u8, 0x45u8, 0x7Cu8, 0x13u8, 0x6Au8, 0x7Du8, 
    0x9Fu8, 0xD4u8, 0xA7u8, 0xF5u8, 0x29u8, 0xFDu8, 0x4Au8, 0x7Fu8, 0x52u8, 0x9Fu8, 0xD4u8, 0xA7u8, 
    0xF5u8, 0x29u8, 0xFDu8, 0x4Au8, 0x7Fu8, 0x52u8, 0x9Fu8, 0xD4u8, 0xA7u8, 0xF5u8, 0x29u8, 0xFDu8, 
    0x4Au8, 0x7Fu8, 0x52u8, 0x9Fu8, 0xD4u8, 0xA7u8, 0xF5u8, 0x2Au8
    ]));

pub const GBARR: Barr = Barr(secret_bytes!([
    0x1Du8, 0x41u8, 0xE4u8, 0x9Cu8, 0x47u8, 0x7Eu8, 0x15u8, 0xEAu8, 0xEEu8, 0xF0u8, 0xC5u8, 0xE4u8, 
    0xACu8, 0x08u8, 0xD4u8, 0xA4u8, 0x6Cu8, 0x26u8, 0x8Cu8, 0xD3u8, 0x42u8, 0x4Fu8, 0xC0u8, 0x1Du8, 
    0x13u8, 0x76u8, 0x9Bu8, 0xDBu8, 0x43u8, 0x67u8, 0x32u8, 0x18u8, 0x58u8, 0x7Bu8, 0xC8u8, 0x6Cu8, 
    0x4Cu8, 0x14u8, 0x48u8, 0xD0u8, 0x06u8, 0xA0u8, 0x36u8, 0x99u8, 0xF3u8, 0xABu8, 0xAEu8, 0x5Fu8, 
    0xEBu8, 0x19u8, 0xE2u8, 0x96u8, 0xF5u8, 0xD1u8, 0x43u8, 0xCCu8, 0x5Eu8, 0x4Au8, 0x3Fu8, 0xC8u8, 
    0x90u8, 0x88u8, 0xC9u8, 0xF4u8, 0x52u8, 0x3Du8, 0x16u8, 0x6Eu8, 0xE3u8, 0xAEu8, 0x9Du8, 0x5Fu8, 
    0xB0u8, 0x3Cu8, 0x0Bu8, 0xDDu8, 0x77u8, 0xADu8, 0xD5u8, 0xC0u8, 0x17u8, 0xF6u8, 0xC5u8, 0x5Eu8, 
    0x2Eu8, 0xC9u8, 0x2Cu8, 0x22u8, 0x6Fu8, 0xEFu8, 0x5Cu8, 0x6Cu8, 0x1Du8, 0xF2u8, 0xE7u8, 0xC3u8, 
    0x6Du8, 0x90u8, 0xE7u8, 0xEAu8, 0xADu8, 0xE0u8, 0x98u8, 0x24u8, 0x1Du8, 0x34u8, 0x09u8, 0x98u8, 
    0x3Bu8, 0xCCu8, 0xD2u8, 0xB5u8, 0x37u8, 0x9Eu8, 0x93u8, 0x91u8, 0xFBu8, 0xC6u8, 0x2Fu8, 0x9Fu8, 
    0x8Du8, 0x93u8, 0x9Du8, 0x12u8, 0x08u8, 0xB1u8, 0x60u8, 0x36u8, 0x7Cu8, 0x13u8, 0x42u8, 0x64u8, 
    0x12u8, 0x21u8, 0x89u8, 0x59u8, 0x5Eu8, 0xC8u8, 0x5Cu8, 0x8Cu8, 0xDBu8, 0xE5u8, 0xF9u8, 0xD3u8, 
    0x07u8, 0xF4u8, 0x69u8, 0x12u8, 0xC0u8, 0x49u8, 0x32u8, 0xF8u8, 0xC1u8, 0x68u8, 0x15u8, 0xA7u8, 
    0x6Bu8, 0x46u8, 0x82u8, 0xBDu8, 0x6Bu8, 0xDCu8, 0x0Eu8, 0xD5u8, 0x2Bu8, 0x00u8, 0xD8u8, 0xD3u8, 
    0x0Fu8, 0x59u8, 0xC7u8, 0x31u8, 0xD5u8, 0xA7u8, 0xFFu8, 0xAEu8, 0x81u8, 0x65u8, 0xD5u8, 0x3Cu8, 
    0xF9u8, 0x66u8, 0x49u8, 0xAAu8, 0xC2u8, 0xB7u8, 0x43u8, 0xDAu8, 0x56u8, 0xF1u8, 0x4Fu8, 0x19u8, 
    0xDAu8, 0xCCu8, 0x52u8, 0x36u8, 0xF2u8, 0x9Bu8, 0x1Au8, 0xB9u8, 0xF9u8, 0xBEu8, 0xFCu8, 0x69u8, 
    0x69u8, 0x72u8, 0x93u8, 0xD5u8, 0xDEu8, 0xADu8, 0x8Bu8, 0x5Bu8, 0xF5u8, 0xDEu8, 0x9Bu8, 0xABu8, 
    0x6Du8, 0xE6u8, 0x7Cu8, 0x45u8, 0x71u8, 0x9Eu8, 0x56u8, 0x34u8, 0x4Au8, 0x3Cu8, 0xBDu8, 0xF3u8, 
    0x60u8, 0x98u8, 0x24u8, 0xB1u8, 0xB5u8, 0x78u8, 0xE3u8, 0x4Eu8, 0xAEu8, 0xB6u8, 0xDDu8, 0x31u8, 
    0x90u8, 0xABu8, 0x35u8, 0x71u8, 0xD6u8, 0xD6u8, 0x71u8, 0xC5u8, 0x12u8, 0x28u8, 0x2Cu8, 0x1Du8, 
    0xA7u8, 0xBDu8, 0x36u8, 0xB4u8, 0x25u8, 0x1Du8, 0x25u8, 0x84u8, 0xFAu8, 0xDEu8, 0xA8u8, 0x0Bu8, 
    0x9Eu8, 0x14u8, 0x14u8, 0x23u8, 0x07u8, 0x4Du8, 0xD9u8, 0xB5u8, 0xFBu8, 0x83u8, 0xACu8, 0xBDu8, 
    0xEAu8, 0xD4u8, 0xC8u8, 0x7Au8, 0x58u8, 0xFFu8, 0xF5u8, 0x17u8, 0xF9u8, 0x77u8, 0xA8u8, 0x30u8, 
    0x80u8, 0x37u8, 0x0Au8, 0x3Bu8, 0x0Cu8, 0xF9u8, 0x8Au8, 0x1Bu8, 0xC2u8, 0x97u8, 0x8Cu8, 0x47u8, 
    0xAAu8, 0xC2u8, 0x96u8, 0x11u8, 0xFDu8, 0x6Cu8, 0x40u8, 0xE2u8, 0xF9u8, 0x87u8, 0x5Cu8, 0x35u8, 
    0xD5u8, 0x04u8, 0x43u8, 0xA9u8, 0xAAu8, 0x3Fu8, 0x49u8, 0x61u8, 0x1Du8, 0xCDu8, 0x3Au8, 0x0Du8, 
    0x6Fu8, 0xF3u8, 0xCBu8, 0x3Fu8, 0xACu8, 0xF3u8, 0x14u8, 0x71u8, 0xBDu8, 0xB6u8, 0x18u8, 0x60u8, 
    0xB9u8, 0x2Cu8, 0x59u8, 0x4Du8, 0x4Eu8, 0x46u8, 0x56u8, 0x9Bu8, 0xB3u8, 0x9Fu8, 0xEEu8, 0xADu8, 
    0xFFu8, 0x1Fu8, 0xD6u8, 0x4Cu8, 0x83u8, 0x6Au8, 0x6Du8, 0x6Du8, 0xB8u8, 0x5Cu8, 0x6Bu8, 0xA7u8, 
    0x24u8, 0x17u8, 0x66u8, 0xB7u8, 0xABu8, 0x56u8, 0xBFu8, 0x73u8, 0x96u8, 0x33u8, 0xB0u8, 0x54u8, 
    0x14u8, 0x7Fu8, 0x71u8, 0x70u8, 0x92u8, 0x14u8, 0x12u8, 0xE9u8, 0x48u8, 0xD9u8, 0xE4u8, 0x74u8, 
    0x02u8, 0xD1u8, 0x5Bu8, 0xB1u8, 0xC2u8, 0x57u8, 0x31u8, 0x86u8, 0x12u8, 0xC1u8, 0x21u8, 0xC3u8, 
    0x6Bu8, 0x80u8, 0xEBu8, 0x84u8, 0x33u8, 0xC0u8, 0x8Eu8, 0x7Du8, 0x0Bu8, 0x71u8, 0x49u8, 0xE3u8, 
    0xABu8, 0x0Au8, 0x87u8, 0x35u8, 0xA9u8, 0x2Eu8, 0xDCu8, 0xE8u8, 0xFFu8, 0x94u8, 0x3Eu8, 0x28u8, 
    0xA2u8, 0xDCu8, 0xEAu8, 0xCFu8, 0xCCu8, 0x69u8, 0xECu8, 0x31u8, 0x89u8, 0x09u8, 0xCBu8, 0x04u8, 
    0x7Bu8, 0xE1u8, 0xC5u8, 0x85u8, 0x88u8, 0x44u8, 0xB5u8, 0xADu8, 0x44u8, 0xF2u8, 0x2Eu8, 0xEBu8, 
    0x28u8, 0x9Eu8, 0x4Cu8, 0xC5u8, 0x54u8, 0xF7u8, 0xA5u8, 0xE2u8, 0xF3u8, 0xDEu8, 0xA0u8, 0x26u8, 
    0x87u8, 0x7Fu8, 0xF9u8, 0x28u8, 0x51u8, 0x81u8, 0x60u8, 0x71u8, 0xCEu8, 0x02u8, 0x8Eu8, 0xB8u8, 
    0x68u8, 0xD9u8, 0x65u8, 0xCCu8, 0xB2u8, 0xD2u8, 0x29u8, 0x5Au8, 0x8Cu8, 0x55u8, 0xBDu8, 0x1Cu8, 
    0x07u8, 0x0Bu8, 0x39u8, 0xB0u8, 0x9Au8, 0xE0u8, 0x6Bu8, 0x37u8, 0xD2u8, 0x93u8, 0x43u8, 0xB9u8, 
    0xD8u8, 0x99u8, 0x7Du8, 0xC2u8, 0x44u8, 0xC4u8, 0x68u8, 0xB9u8, 0x80u8, 0x97u8, 0x07u8, 0x31u8, 
    0x73u8, 0x6Eu8, 0xE0u8, 0x18u8, 0xBBu8, 0xADu8, 0xB9u8, 0x87u8 
    ]));

/// ## Step 1. (Parameter verification)
/// This step verifies the standard baseline parameters from the election record, by comparison to it's own hard coded parameters.
/// 
/// (1.A) The large prime is equal to the large modulus $p$ defined in Section 3.1.1. of the specification.
/// (1.B) The small prime is equal to the prime $q = 2256 − 189$.
/// (1.C) The cofactor is equal to $r = (p − 1)/q$.
/// (1.D) The generator is equal to the generator g defined in Section 3.1.1.
pub fn firstCheck(constants(pbytes, qbytes, rbytes, gbytes): constants) -> bool {
    // let LargePrime = BINT::from_byte_seq_be(&PBARR);
    // let SMALL_PRIME = BINT::from_byte_seq_be(&QBARR);
    // let COFACTOR = BINT::from_byte_seq_be(&RBARR);
    // let GENERATOR = BINT::from_byte_seq_be(&RBARR);

    // let pIn = BINT::from_byte_seq_be(pbytes);
    // let qIn = BINT::from_byte_seq_be(qbytes);
    // let rIn = BINT::from_byte_seq_be(rbytes);
    // let gIn = BINT::from_byte_seq_be(gbytes);
    
    let pEq = seq_arithmetic::seq_eq(&pbytes, &PBARR.to_be_bytes());
    let qEq = seq_arithmetic::seq_eq(&qbytes, &QBARR.to_be_bytes());
    let rEq = seq_arithmetic::seq_eq(&rbytes, &RBARR.to_be_bytes());
    let gEq = seq_arithmetic::seq_eq(&gbytes, &GBARR.to_be_bytes());

    let result = pEq && qEq && rEq && gEq;

    result
}
